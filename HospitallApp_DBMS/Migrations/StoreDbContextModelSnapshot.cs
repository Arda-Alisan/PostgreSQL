// <auto-generated />
using System;
using HospitallApp_DBMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HospitallApp_DBMS.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HospitallApp_DBMS.Models.Appointment", b =>
                {
                    b.Property<long>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DoctorPersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientPersonId")
                        .HasColumnType("bigint");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorPersonId");

                    b.HasIndex("PatientPersonId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Clinic", b =>
                {
                    b.Property<long>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ClinicId"));

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClinicId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Doctor", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.HasIndex("ClinicId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Drug", b =>
                {
                    b.Property<long>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("DrugId"));

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DrugType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DrugId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Nurse", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorPersonId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonId");

                    b.HasIndex("DoctorPersonId");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Patient", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Person", b =>
                {
                    b.Property<long>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PersonId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("doctor")
                        .HasColumnType("boolean");

                    b.Property<bool>("nurse")
                        .HasColumnType("boolean");

                    b.Property<bool>("patient")
                        .HasColumnType("boolean");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Prescription", b =>
                {
                    b.Property<long>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PrescriptionId"));

                    b.Property<long>("DoctorPersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientPersonId")
                        .HasColumnType("bigint");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorPersonId");

                    b.HasIndex("PatientPersonId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.PrescriptionDrug", b =>
                {
                    b.Property<long>("prescription")
                        .HasColumnType("bigint");

                    b.Property<long>("drug")
                        .HasColumnType("bigint");

                    b.HasKey("prescription", "drug");

                    b.HasIndex("drug");

                    b.ToTable("PrescriptionDrugs");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Room", b =>
                {
                    b.Property<long>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RoomId"));

                    b.Property<long>("ClinicId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorPersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoomId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorPersonId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Appointment", b =>
                {
                    b.HasOne("HospitallApp_DBMS.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitallApp_DBMS.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Doctor", b =>
                {
                    b.HasOne("HospitallApp_DBMS.Models.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctors_Clinics_ClinicId");

                    b.HasOne("HospitallApp_DBMS.Models.Person", "Person")
                        .WithMany("Doctors")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_Person_PersonId");

                    b.Navigation("Clinic");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Nurse", b =>
                {
                    b.HasOne("HospitallApp_DBMS.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitallApp_DBMS.Models.Person", "Person")
                        .WithMany("Nurses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Nurse_Person_PersonId");

                    b.Navigation("Doctor");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Patient", b =>
                {
                    b.HasOne("HospitallApp_DBMS.Models.Person", "Person")
                        .WithMany("Patients")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Patient_Person_PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Prescription", b =>
                {
                    b.HasOne("HospitallApp_DBMS.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitallApp_DBMS.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.PrescriptionDrug", b =>
                {
                    b.HasOne("HospitallApp_DBMS.Models.Drug", "Drug")
                        .WithMany("PrescriptionDrugs")
                        .HasForeignKey("drug")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitallApp_DBMS.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionDrugs")
                        .HasForeignKey("prescription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Room", b =>
                {
                    b.HasOne("HospitallApp_DBMS.Models.Clinic", "Clinic")
                        .WithMany("Rooms")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitallApp_DBMS.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Clinic", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Drug", b =>
                {
                    b.Navigation("PrescriptionDrugs");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Person", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Nurses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitallApp_DBMS.Models.Prescription", b =>
                {
                    b.Navigation("PrescriptionDrugs");
                });
#pragma warning restore 612, 618
        }
    }
}
